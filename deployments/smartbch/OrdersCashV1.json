{
  "address": "0xcc9195c34ef5CC65F5A377037a50F86c066F0a32",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "coinTypeToMaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinAmountToMaker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "coinTypeToTaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinAmountToTaker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dueTime80",
          "type": "uint256"
        }
      ],
      "name": "Exchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDueTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currTime",
          "type": "uint256"
        }
      ],
      "name": "NewDueTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDueTime",
          "type": "uint256"
        }
      ],
      "name": "addNewDueTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "makerAddr",
          "type": "address"
        }
      ],
      "name": "clearOldDueTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "coinsToMaker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinsToTaker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueTime80_v8_version8",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "directExchange",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "coinsToMaker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinsToTaker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueTime80",
          "type": "uint256"
        }
      ],
      "name": "getEIP712Hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "makerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxCount",
          "type": "uint256"
        }
      ],
      "name": "getRecentDueTimes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "coinsToMaker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinsToTaker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueTime80_v8_version8",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "makerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dueTime",
          "type": "uint256"
        }
      ],
      "name": "isReplay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "makerNextRecentDueTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "makerRDTHeadTail",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x54002f1f3dfbc73f97939837d95a3eb312b5a5362125bec1148f76083dde6c5e",
  "receipt": {
    "to": null,
    "from": "0x65DE2f3b1Aff0b854b2e25b02eBB655238436853",
    "contractAddress": "0xcc9195c34ef5CC65F5A377037a50F86c066F0a32",
    "transactionIndex": 0,
    "gasUsed": "1113055",
    "logsBloom": "0x
    "blockHash": "0x41fbcffe2a3cc874e7ef01b2804baf6a1dc2abc04e53c5a45494b8a95baac70e",
    "transactionHash": "0x54002f1f3dfbc73f97939837d95a3eb312b5a5362125bec1148f76083dde6c5e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5554485,
        "transactionHash": "0x54002f1f3dfbc73f97939837d95a3eb312b5a5362125bec1148f76083dde6c5e",
        "address": "0xcc9195c34ef5CC65F5A377037a50F86c066F0a32",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000065de2f3b1aff0b854b2e25b02ebb655238436853"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x41fbcffe2a3cc874e7ef01b2804baf6a1dc2abc04e53c5a45494b8a95baac70e"
      }
    ],
    "blockNumber": 5554485,
    "cumulativeGasUsed": "1113055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ba5add4c53f393c2fd4e98e47072f306",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinTypeToMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinAmountToMaker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinTypeToTaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinAmountToTaker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dueTime80\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDueTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currTime\",\"type\":\"uint256\"}],\"name\":\"NewDueTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDueTime\",\"type\":\"uint256\"}],\"name\":\"addNewDueTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAddr\",\"type\":\"address\"}],\"name\":\"clearOldDueTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinsToMaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsToTaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueTime80_v8_version8\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"directExchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinsToMaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsToTaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueTime80\",\"type\":\"uint256\"}],\"name\":\"getEIP712Hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"makerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"getRecentDueTimes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinsToMaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinsToTaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueTime80_v8_version8\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"makerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dueTime\",\"type\":\"uint256\"}],\"name\":\"isReplay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"makerNextRecentDueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"makerRDTHeadTail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrdersCashV1.sol\":\"OrdersCashV1\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/OrdersCashV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n\\ncontract OrdersCashV1 is Ownable {\\n    address private constant SEP206_ADDRESS = 0x0000000000000000000000000000000000002711;\\n    // address private constant BCH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address private constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\\n\\n    string private constant EIP712_DOMAIN = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\";\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\\n    bytes32 private constant NAME_HASH = keccak256(abi.encodePacked(\\\"exchange dapp\\\"));\\n    bytes32 private constant VERSION_HASH = keccak256(abi.encodePacked(\\\"v0.1.0\\\"));\\n    uint256 private constant CHAINID = 10000; // smartBCH mainnet\\n    bytes32 private constant SALT = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n    uint8 private constant VERSION = 1;\\n\\n    bytes32 private constant TYPE_HASH = keccak256(abi.encodePacked(\\\"Exchange(uint256 coinsToMaker,uint256 coinsToTaker,uint256 dueTime80)\\\"));\\n\\n    uint256 private constant MUL = 10**12; // number of picoseconds in one second\\n    uint256 private constant MaxClearCount = 10;\\n\\n    //To prevent replay of coin-exchanging messages, we use dueTime to identify a coin-exchanging message uniquely\\n    mapping(address => mapping(uint256 => uint256)) public makerNextRecentDueTime; //the pointers of a linked-list\\n    mapping(address => uint256) public makerRDTHeadTail; //the head and tail of a linked-list\\n\\n    //A maker and a taker exchange their coins\\n    event Exchange(\\n        address indexed maker,\\n        address indexed taker,\\n        address coinTypeToMaker,\\n        uint256 coinAmountToMaker,\\n        address coinTypeToTaker,\\n        uint256 coinAmountToTaker,\\n        uint256 dueTime80\\n    );\\n    event NewDueTime(address indexed maker, uint256 newDueTime, uint256 currTime);\\n\\n    // function isBCH(address tokenAddr) internal pure returns (bool) {\\n    //     return (tokenAddr == ZERO_ADDRESS || tokenAddr == BCH_ADDRESS || tokenAddr == SEP206_ADDRESS);\\n    // }\\n\\n    function getEIP712Hash(\\n        uint256 coinsToMaker,\\n        uint256 coinsToTaker,\\n        uint256 dueTime80\\n    ) public view returns (bytes32) {\\n        bytes32 DOMAIN_SEPARATOR = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, NAME_HASH, VERSION_HASH, CHAINID, address(this), SALT));\\n        return\\n            keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(TYPE_HASH, coinsToMaker, coinsToTaker, dueTime80))));\\n    }\\n\\n    function getSigner(\\n        uint256 coinsToMaker,\\n        uint256 coinsToTaker,\\n        uint256 dueTime80_v8_version8,\\n        bytes32 r,\\n        bytes32 s\\n    ) public view returns (address) {\\n        bytes32 eip712Hash = getEIP712Hash(coinsToMaker, coinsToTaker, dueTime80_v8_version8 >> 16);\\n        uint8 v = uint8(dueTime80_v8_version8 >> 8);\\n        return ecrecover(eip712Hash, v, r, s);\\n    }\\n\\n    // Returns recent recorded dueTimes of a maker\\n    function getRecentDueTimes(address makerAddr, uint256 maxCount) external view returns (uint256[] memory) {\\n        uint256 head = makerRDTHeadTail[makerAddr] >> 80;\\n        uint256[] memory recentDueTimes = new uint256[](maxCount);\\n        for (uint256 i = 0; i < maxCount && head != 0; ++i) {\\n            recentDueTimes[i] = head;\\n            head = makerNextRecentDueTime[makerAddr][head];\\n        }\\n        return recentDueTimes;\\n    }\\n\\n    // By adding a new dueTime entry in the linked-list, we can revoke a coin-exchanging message\\n    function addNewDueTime(uint256 newDueTime) external {\\n        require(newDueTime != 0, \\\"OrdersCashV1: invalid dueTime\\\");\\n        uint256 currTime = block.timestamp * MUL;\\n        clearOldDueTimesAndInsertNew(msg.sender, newDueTime, currTime);\\n        emit NewDueTime(msg.sender, newDueTime, currTime);\\n    }\\n\\n    // Delete some useless entries from the linked list\\n    function clearOldDueTimes(uint256 maxCount, address makerAddr) external {\\n        uint256 currTime = block.timestamp * MUL;\\n        uint256 headTail = makerRDTHeadTail[makerAddr];\\n        (uint256 head, uint256 tail) = (headTail >> 80, uint256(uint80(headTail)));\\n        (head, tail) = _clearOldDueTimes(maxCount, makerAddr, currTime, head, tail);\\n        makerRDTHeadTail[makerAddr] = (head << 80) | tail;\\n    }\\n\\n    // If a message's dueTime was recorded in the linked-list before, it is a replay and can't take effect\\n    function isReplay(address makerAddr, uint256 dueTime) external view returns (bool) {\\n        uint256 tail = uint80(makerRDTHeadTail[makerAddr]);\\n        return tail == dueTime || makerNextRecentDueTime[makerAddr][dueTime] != 0;\\n    }\\n\\n    //Delete some useless entries from the linked list and insert a new one\\n    function clearOldDueTimesAndInsertNew(\\n        address makerAddr,\\n        uint256 newDueTime,\\n        uint256 currTime\\n    ) private {\\n        uint256 headTail = makerRDTHeadTail[makerAddr];\\n        (uint256 head, uint256 tail) = (headTail >> 80, uint256(uint80(headTail)));\\n        require(tail != newDueTime && makerNextRecentDueTime[makerAddr][newDueTime] == 0, \\\"OrdersCashV1: dueTime not new\\\");\\n\\n        (head, tail) = _clearOldDueTimes(MaxClearCount, makerAddr, currTime, head, tail);\\n        (head, tail) = _addNewDueTime(makerAddr, newDueTime, head, tail);\\n        makerRDTHeadTail[makerAddr] = (head << 80) | tail;\\n    }\\n\\n    // The linked-list:\\n    // No entries in queue: head = 0, tail = 0\\n    // One entry in queue: head = dueTime, tail = dueTime\\n    // Two entries in queue: head = A, tail = B, makerNextRecentDueTime[makerAddr][A] = B\\n    function _clearOldDueTimes(\\n        uint256 maxCount,\\n        address makerAddr,\\n        uint256 currTime,\\n        uint256 head,\\n        uint256 tail\\n    ) private returns (uint256, uint256) {\\n        for (uint256 i = 0; i < maxCount && head < currTime && head != 0; ++i) {\\n            uint256 newHead = makerNextRecentDueTime[makerAddr][head];\\n            makerNextRecentDueTime[makerAddr][head] = 0;\\n            head = newHead;\\n        }\\n\\n        if (head == 0) {\\n            tail = 0;\\n        }\\n\\n        return (head, tail);\\n    }\\n\\n    function _addNewDueTime(\\n        address makerAddr,\\n        uint256 dueTime,\\n        uint256 head,\\n        uint256 tail\\n    ) private returns (uint256, uint256) {\\n        if (head == 0) {\\n            return (dueTime, dueTime);\\n        }\\n\\n        makerNextRecentDueTime[makerAddr][tail] = dueTime;\\n        return (head, dueTime);\\n    }\\n\\n    // A taker exchanges with a maker, using a message signature generated by the maker\\n    function directExchange(\\n        uint256 coinsToMaker,\\n        uint256 coinsToTaker,\\n        uint256 dueTime80_v8_version8,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable {\\n        _directExchange(coinsToMaker, coinsToTaker, dueTime80_v8_version8, r, s);\\n    }\\n\\n    function _directExchange(\\n        uint256 coinsToMaker,\\n        uint256 coinsToTaker,\\n        uint256 dueTime80_v8_version8,\\n        bytes32 r,\\n        bytes32 s\\n    ) private {\\n        uint256 dueTime = uint80(dueTime80_v8_version8 >> 16);\\n        uint256 currTime = block.timestamp * MUL;\\n        require(currTime < dueTime, \\\"OrdersCashV1: order expired\\\");\\n        require(uint8(dueTime80_v8_version8) == VERSION, \\\"OrdersCashV1: version does not match\\\");\\n\\n        address makerAddr = getSigner(coinsToMaker, coinsToTaker, dueTime80_v8_version8, r, s);\\n\\n        clearOldDueTimesAndInsertNew(makerAddr, dueTime, currTime);\\n        address takerAddr = msg.sender;\\n\\n        address coinTypeToMaker = address(bytes20(uint160(coinsToMaker >> 96)));\\n        uint256 coinAmountToMaker = uint256(uint96(coinsToMaker));\\n        address coinTypeToTaker = address(bytes20(uint160(coinsToTaker >> 96)));\\n        uint256 coinAmountToTaker = uint256(uint96(coinsToTaker));\\n\\n        require(coinTypeToMaker != coinTypeToTaker, \\\"OrdersCashV1: both tokens are the same\\\");\\n\\n        if (coinTypeToMaker == ZERO_ADDRESS) {\\n            coinTypeToMaker = SEP206_ADDRESS;\\n        }\\n\\n        if (coinTypeToTaker == ZERO_ADDRESS) {\\n            coinTypeToTaker = SEP206_ADDRESS;\\n        }\\n\\n        require(coinTypeToMaker != SEP206_ADDRESS || msg.value <= coinAmountToMaker, \\\"OrdersCashV1: BCH sent exceeds the amount to be sent\\\");\\n\\n        if (coinAmountToTaker != 0) {\\n            (bool success, bytes memory _notUsed) = coinTypeToTaker.call(\\n                abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", makerAddr, takerAddr, coinAmountToTaker)\\n            );\\n            require(success, \\\"OrdersCashV1: transferFrom failed\\\");\\n        }\\n\\n        if (coinAmountToMaker != 0) {\\n            if (coinTypeToMaker == SEP206_ADDRESS) {\\n                require(msg.value == coinAmountToMaker, \\\"OrdersCashV1: BCH not enough\\\");\\n                (bool success, bytes memory _notUsed) = makerAddr.call{gas: 9000, value: coinAmountToMaker}(\\\"\\\");\\n                require(success, \\\"transfer fail\\\");\\n            } else {\\n                require(msg.value == 0, \\\"OrdersCashV1: no need for BCH\\\");\\n                IERC20(coinTypeToMaker).transferFrom(takerAddr, makerAddr, coinAmountToMaker);\\n            }\\n        }\\n\\n        emit Exchange(makerAddr, takerAddr, coinTypeToMaker, coinAmountToMaker, coinTypeToTaker, coinAmountToTaker, dueTime);\\n    }\\n}\\n\",\"keccak256\":\"0x2b0e16a727b7c0479161bfe46a6ade6ebbc7475101ea27247ce7798b80205bce\",\"license\":\"Apache\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6112be8061007e6000396000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b1461018e578063e7e40650146101c0578063f1b36d13146101e0578063f1e25f811461020d578063f2fde38b1461023d578063fa42abe81461025d57600080fd5b80633f084e41146100ac57806342a10c32146100c15780634b3fdaa1146100f457806369c37f651461012c578063715018a61461014c57806389c967b714610161575b600080fd5b6100bf6100ba366004610fe7565b61027d565b005b3480156100cd57600080fd5b506100e16100dc366004611022565b610291565b6040519081526020015b60405180910390f35b34801561010057600080fd5b506100e161010f36600461106a565b600160209081526000928352604080842090915290825290205481565b34801561013857600080fd5b506100bf610147366004611094565b6104ba565b34801561015857600080fd5b506100bf610532565b34801561016d57600080fd5b506100e161017c3660046110c0565b60026020526000908152604090205481565b34801561019a57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100eb565b3480156101cc57600080fd5b506100bf6101db3660046110e2565b610546565b3480156101ec57600080fd5b506102006101fb36600461106a565b6105f5565b6040516100eb91906110fb565b34801561021957600080fd5b5061022d61022836600461106a565b6106d3565b60405190151581526020016100eb565b34801561024957600080fd5b506100bf6102583660046110c0565b610730565b34801561026957600080fd5b506101a8610278366004610fe7565b6107a9565b61028a858585858561082e565b5050505050565b6000806040518060800160405280605f815260200161122a605f91396040516020016102bd919061116f565b604051602081830303815290604052805190602001206040516020016102f6906c065786368616e6765206461707609c1b8152600d0190565b604051602081830303815290604052805190602001206040516020016103289065076302e312e360d41b815260060190565b6040516020818303038152906040528051906020012061271030604051602001610360906745786368616e676560c01b815260080190565b60408051601f19818403018152828252805160209182012090830197909752810194909452606084019290925260808301526001600160a01b031660a082015260c081019190915260e0016040516020818303038152906040528051906020012090508060405160200161042b907f45786368616e67652875696e7432353620636f696e73546f4d616b65722c756981527f6e7432353620636f696e73546f54616b65722c75696e743235362064756554696020820152646d6538302960d81b604082015260450190565b60408051601f198184030181528282528051602091820120908301528101879052606081018690526080810185905260a0016040516020818303038152906040528051906020012060405160200161049a92919061190160f01b81526002810192909252602282015260420190565b604051602081830303815290604052805190602001209150509392505050565b60006104cb64e8d4a51000426111a1565b6001600160a01b038316600090815260026020526040902054909150605081901c69ffffffffffffffffffff82166105068686868585610d90565b6001600160a01b03909616600090815260026020526040902060509190911b9095179094555050505050565b61053a610e04565b6105446000610e5e565b565b806105985760405162461bcd60e51b815260206004820152601d60248201527f4f72646572734361736856313a20696e76616c69642064756554696d6500000060448201526064015b60405180910390fd5b60006105a964e8d4a51000426111a1565b90506105b6338383610eae565b604080518381526020810183905233917f8d8faa894051ac5f062d0a75d9461ca5a8b3804412ed628af3c126f6a9a8c5dd910160405180910390a25050565b6001600160a01b03821660009081526002602052604081205460609160509190911c908367ffffffffffffffff811115610631576106316111c0565b60405190808252806020026020018201604052801561065a578160200160208202803683370190505b50905060005b848110801561066e57508215155b156106ca5782828281518110610686576106866111d6565b6020908102919091018101919091526001600160a01b0387166000908152600182526040808220958252949091529290922054916106c3816111ec565b9050610660565b50949350505050565b6001600160a01b03821660009081526002602052604081205469ffffffffffffffffffff168281148061072857506001600160a01b038416600090815260016020908152604080832086845290915290205415155b949350505050565b610738610e04565b6001600160a01b03811661079d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161058f565b6107a681610e5e565b50565b6000806107bb8787601088901c610291565b604080516000815260208101808352839052600888901c60ff81169282019290925260608101879052608081018690529192509060019060a0016020604051602081039080840390855afa158015610817573d6000803e3d6000fd5b5050604051601f1901519998505050505050505050565b69ffffffffffffffffffff601084901c16600061085064e8d4a51000426111a1565b90508181106108a15760405162461bcd60e51b815260206004820152601b60248201527f4f72646572734361736856313a206f7264657220657870697265640000000000604482015260640161058f565b60ff85166001146109005760405162461bcd60e51b8152602060048201526024808201527f4f72646572734361736856313a2076657273696f6e20646f6573206e6f74206d6044820152630c2e8c6d60e31b606482015260840161058f565b600061090f88888888886107a9565b905061091c818484610eae565b33606089811c906bffffffffffffffffffffffff808c16918b901c908b16818414156109995760405162461bcd60e51b815260206004820152602660248201527f4f72646572734361736856313a20626f746820746f6b656e7320617265207468604482015265652073616d6560d01b606482015260840161058f565b6001600160a01b0384166109ad5761271193505b6001600160a01b0382166109c15761271191505b6001600160a01b0384166127111415806109db5750823411155b610a445760405162461bcd60e51b815260206004820152603460248201527f4f72646572734361736856313a204243482073656e74206578636565647320746044820152731a1948185b5bdd5b9d081d1bc81899481cd95b9d60621b606482015260840161058f565b8015610b4d576040516001600160a01b038781166024830152868116604483015260648201839052600091829185169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b17905251610aac919061116f565b6000604051808303816000865af19150503d8060008114610ae9576040519150601f19603f3d011682016040523d82523d6000602084013e610aee565b606091505b509150915081610b4a5760405162461bcd60e51b815260206004820152602160248201527f4f72646572734361736856313a207472616e7366657246726f6d206661696c656044820152601960fa1b606482015260840161058f565b50505b8215610d20576001600160a01b0384166127111415610c5557823414610bb55760405162461bcd60e51b815260206004820152601c60248201527f4f72646572734361736856313a20424348206e6f7420656e6f75676800000000604482015260640161058f565b600080876001600160a01b031661232886604051600060405180830381858888f193505050503d8060008114610c07576040519150601f19603f3d011682016040523d82523d6000602084013e610c0c565b606091505b509150915081610c4e5760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8819985a5b609a1b604482015260640161058f565b5050610d20565b3415610ca35760405162461bcd60e51b815260206004820152601d60248201527f4f72646572734361736856313a206e6f206e65656420666f7220424348000000604482015260640161058f565b6040516323b872dd60e01b81526001600160a01b0386811660048301528781166024830152604482018590528516906323b872dd906064016020604051808303816000875af1158015610cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1e9190611207565b505b604080516001600160a01b038681168252602082018690528481168284015260608201849052608082018b90529151878316928916917f2083d2b241ef1ec859ae0402864fd9fe9d6d36b18c73615625b46acaf113be78919081900360a00190a350505050505050505050505050565b60008060005b8781108015610da457508585105b8015610daf57508415155b15610ded576001600160a01b03871660009081526001602090815260408083209783529690529485208054959055610de6816111ec565b9050610d96565b5083610df857600092505b50919590945092505050565b6000546001600160a01b031633146105445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038316600090815260026020526040902054605081901c69ffffffffffffffffffff8216848114801590610f0a57506001600160a01b0386166000908152600160209081526040808320888452909152902054155b610f565760405162461bcd60e51b815260206004820152601d60248201527f4f72646572734361736856313a2064756554696d65206e6f74206e6577000000604482015260640161058f565b610f64600a87868585610d90565b9092509050610f7586868484610fa1565b6001600160a01b03909716600090815260026020526040902060509190911b9096179095555050505050565b60008083610fb3575083905080610fde565b50506001600160a01b0384166000908152600160209081526040808320848452909152902083905581835b94509492505050565b600080600080600060a08688031215610fff57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060006060848603121561103757600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b038116811461106557600080fd5b919050565b6000806040838503121561107d57600080fd5b6110868361104e565b946020939093013593505050565b600080604083850312156110a757600080fd5b823591506110b76020840161104e565b90509250929050565b6000602082840312156110d257600080fd5b6110db8261104e565b9392505050565b6000602082840312156110f457600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561113357835183529284019291840191600101611117565b50909695505050505050565b60005b8381101561115a578181015183820152602001611142565b83811115611169576000848401525b50505050565b6000825161118181846020870161113f565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156111bb576111bb61118b565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156112005761120061118b565b5060010190565b60006020828403121561121957600080fd5b815180151581146110db57600080fdfe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429a2646970667358221220ebaec43964d6151d3b14e635028c576a3ac564fe74021e33bac9864aec5a4aef64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b1461018e578063e7e40650146101c0578063f1b36d13146101e0578063f1e25f811461020d578063f2fde38b1461023d578063fa42abe81461025d57600080fd5b80633f084e41146100ac57806342a10c32146100c15780634b3fdaa1146100f457806369c37f651461012c578063715018a61461014c57806389c967b714610161575b600080fd5b6100bf6100ba366004610fe7565b61027d565b005b3480156100cd57600080fd5b506100e16100dc366004611022565b610291565b6040519081526020015b60405180910390f35b34801561010057600080fd5b506100e161010f36600461106a565b600160209081526000928352604080842090915290825290205481565b34801561013857600080fd5b506100bf610147366004611094565b6104ba565b34801561015857600080fd5b506100bf610532565b34801561016d57600080fd5b506100e161017c3660046110c0565b60026020526000908152604090205481565b34801561019a57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100eb565b3480156101cc57600080fd5b506100bf6101db3660046110e2565b610546565b3480156101ec57600080fd5b506102006101fb36600461106a565b6105f5565b6040516100eb91906110fb565b34801561021957600080fd5b5061022d61022836600461106a565b6106d3565b60405190151581526020016100eb565b34801561024957600080fd5b506100bf6102583660046110c0565b610730565b34801561026957600080fd5b506101a8610278366004610fe7565b6107a9565b61028a858585858561082e565b5050505050565b6000806040518060800160405280605f815260200161122a605f91396040516020016102bd919061116f565b604051602081830303815290604052805190602001206040516020016102f6906c065786368616e6765206461707609c1b8152600d0190565b604051602081830303815290604052805190602001206040516020016103289065076302e312e360d41b815260060190565b6040516020818303038152906040528051906020012061271030604051602001610360906745786368616e676560c01b815260080190565b60408051601f19818403018152828252805160209182012090830197909752810194909452606084019290925260808301526001600160a01b031660a082015260c081019190915260e0016040516020818303038152906040528051906020012090508060405160200161042b907f45786368616e67652875696e7432353620636f696e73546f4d616b65722c756981527f6e7432353620636f696e73546f54616b65722c75696e743235362064756554696020820152646d6538302960d81b604082015260450190565b60408051601f198184030181528282528051602091820120908301528101879052606081018690526080810185905260a0016040516020818303038152906040528051906020012060405160200161049a92919061190160f01b81526002810192909252602282015260420190565b604051602081830303815290604052805190602001209150509392505050565b60006104cb64e8d4a51000426111a1565b6001600160a01b038316600090815260026020526040902054909150605081901c69ffffffffffffffffffff82166105068686868585610d90565b6001600160a01b03909616600090815260026020526040902060509190911b9095179094555050505050565b61053a610e04565b6105446000610e5e565b565b806105985760405162461bcd60e51b815260206004820152601d60248201527f4f72646572734361736856313a20696e76616c69642064756554696d6500000060448201526064015b60405180910390fd5b60006105a964e8d4a51000426111a1565b90506105b6338383610eae565b604080518381526020810183905233917f8d8faa894051ac5f062d0a75d9461ca5a8b3804412ed628af3c126f6a9a8c5dd910160405180910390a25050565b6001600160a01b03821660009081526002602052604081205460609160509190911c908367ffffffffffffffff811115610631576106316111c0565b60405190808252806020026020018201604052801561065a578160200160208202803683370190505b50905060005b848110801561066e57508215155b156106ca5782828281518110610686576106866111d6565b6020908102919091018101919091526001600160a01b0387166000908152600182526040808220958252949091529290922054916106c3816111ec565b9050610660565b50949350505050565b6001600160a01b03821660009081526002602052604081205469ffffffffffffffffffff168281148061072857506001600160a01b038416600090815260016020908152604080832086845290915290205415155b949350505050565b610738610e04565b6001600160a01b03811661079d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161058f565b6107a681610e5e565b50565b6000806107bb8787601088901c610291565b604080516000815260208101808352839052600888901c60ff81169282019290925260608101879052608081018690529192509060019060a0016020604051602081039080840390855afa158015610817573d6000803e3d6000fd5b5050604051601f1901519998505050505050505050565b69ffffffffffffffffffff601084901c16600061085064e8d4a51000426111a1565b90508181106108a15760405162461bcd60e51b815260206004820152601b60248201527f4f72646572734361736856313a206f7264657220657870697265640000000000604482015260640161058f565b60ff85166001146109005760405162461bcd60e51b8152602060048201526024808201527f4f72646572734361736856313a2076657273696f6e20646f6573206e6f74206d6044820152630c2e8c6d60e31b606482015260840161058f565b600061090f88888888886107a9565b905061091c818484610eae565b33606089811c906bffffffffffffffffffffffff808c16918b901c908b16818414156109995760405162461bcd60e51b815260206004820152602660248201527f4f72646572734361736856313a20626f746820746f6b656e7320617265207468604482015265652073616d6560d01b606482015260840161058f565b6001600160a01b0384166109ad5761271193505b6001600160a01b0382166109c15761271191505b6001600160a01b0384166127111415806109db5750823411155b610a445760405162461bcd60e51b815260206004820152603460248201527f4f72646572734361736856313a204243482073656e74206578636565647320746044820152731a1948185b5bdd5b9d081d1bc81899481cd95b9d60621b606482015260840161058f565b8015610b4d576040516001600160a01b038781166024830152868116604483015260648201839052600091829185169060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b17905251610aac919061116f565b6000604051808303816000865af19150503d8060008114610ae9576040519150601f19603f3d011682016040523d82523d6000602084013e610aee565b606091505b509150915081610b4a5760405162461bcd60e51b815260206004820152602160248201527f4f72646572734361736856313a207472616e7366657246726f6d206661696c656044820152601960fa1b606482015260840161058f565b50505b8215610d20576001600160a01b0384166127111415610c5557823414610bb55760405162461bcd60e51b815260206004820152601c60248201527f4f72646572734361736856313a20424348206e6f7420656e6f75676800000000604482015260640161058f565b600080876001600160a01b031661232886604051600060405180830381858888f193505050503d8060008114610c07576040519150601f19603f3d011682016040523d82523d6000602084013e610c0c565b606091505b509150915081610c4e5760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8819985a5b609a1b604482015260640161058f565b5050610d20565b3415610ca35760405162461bcd60e51b815260206004820152601d60248201527f4f72646572734361736856313a206e6f206e65656420666f7220424348000000604482015260640161058f565b6040516323b872dd60e01b81526001600160a01b0386811660048301528781166024830152604482018590528516906323b872dd906064016020604051808303816000875af1158015610cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1e9190611207565b505b604080516001600160a01b038681168252602082018690528481168284015260608201849052608082018b90529151878316928916917f2083d2b241ef1ec859ae0402864fd9fe9d6d36b18c73615625b46acaf113be78919081900360a00190a350505050505050505050505050565b60008060005b8781108015610da457508585105b8015610daf57508415155b15610ded576001600160a01b03871660009081526001602090815260408083209783529690529485208054959055610de6816111ec565b9050610d96565b5083610df857600092505b50919590945092505050565b6000546001600160a01b031633146105445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038316600090815260026020526040902054605081901c69ffffffffffffffffffff8216848114801590610f0a57506001600160a01b0386166000908152600160209081526040808320888452909152902054155b610f565760405162461bcd60e51b815260206004820152601d60248201527f4f72646572734361736856313a2064756554696d65206e6f74206e6577000000604482015260640161058f565b610f64600a87868585610d90565b9092509050610f7586868484610fa1565b6001600160a01b03909716600090815260026020526040902060509190911b9096179095555050505050565b60008083610fb3575083905080610fde565b50506001600160a01b0384166000908152600160209081526040808320848452909152902083905581835b94509492505050565b600080600080600060a08688031215610fff57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060006060848603121561103757600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b038116811461106557600080fd5b919050565b6000806040838503121561107d57600080fd5b6110868361104e565b946020939093013593505050565b600080604083850312156110a757600080fd5b823591506110b76020840161104e565b90509250929050565b6000602082840312156110d257600080fd5b6110db8261104e565b9392505050565b6000602082840312156110f457600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561113357835183529284019291840191600101611117565b50909695505050505050565b60005b8381101561115a578181015183820152602001611142565b83811115611169576000848401525b50505050565b6000825161118181846020870161113f565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156111bb576111bb61118b565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156112005761120061118b565b5060010190565b60006020828403121561121957600080fd5b815180151581146110db57600080fdfe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429a2646970667358221220ebaec43964d6151d3b14e635028c576a3ac564fe74021e33bac9864aec5a4aef64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OrdersCashV1.sol:OrdersCashV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1822,
        "contract": "contracts/OrdersCashV1.sol:OrdersCashV1",
        "label": "makerNextRecentDueTime",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1826,
        "contract": "contracts/OrdersCashV1.sol:OrdersCashV1",
        "label": "makerRDTHeadTail",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}